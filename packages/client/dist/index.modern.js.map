{"version":3,"file":"index.modern.js","sources":["../src/getGraphQLErrorCode.js","../src/Session.js","../src/getClient.js","../src/PageContainer.js","../src/firebaseConfig.js"],"sourcesContent":["import get from 'lodash.get';\n\nexport default function getGraphQLErrorCode (error) {\n  let code = get(error, 'graphQLErrors[0].extensions.code', null);\n  if (!code) {\n    code = get(error, 'networkError.result.errors[0].extensions.code', null);\n  }\n  return code;\n}\n","import * as React from 'react';\nimport {\n  createContext,\n  useContext,\n  useState,\n  useEffect\n} from 'react';\nimport PropTypes from 'prop-types';\nimport Firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport getGraphQLErrorCode from './getGraphQLErrorCode';\n\nconst SessionContext = createContext();\n\nfunction SessionProvider ({client, children, SessionUser, Loading, popup = true}) {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const [user, _setUser] = useState(new SessionUser(null));\n\n  function setUser (data) {\n    const user = new SessionUser(data);\n    _setUser(user);\n  }\n\n  useEffect(()=> {\n    const auth = Firebase.auth();\n    const unsubscribe = auth.onAuthStateChanged(async (firebase_user)=> {\n      try {\n        if (firebase_user) {\n          const token = await firebase_user.getIdToken(true);\n          client.setToken(token);\n          const user = await SessionUser.load({client, token, firebase_user});\n          setUser(user);\n        } else {\n          client.clearToken();\n          setUser(null);\n        }\n      } catch (error) {\n        const code = getGraphQLErrorCode(error);\n        if (code) {\n          setError(code);\n        } else {\n          setError('Session error');\n        }\n      } finally {\n        setLoaded(true);\n      }\n    });\n\n    return ()=> {\n      unsubscribe();\n    };\n  }, []);\n\n  async function start ({email, password, provider: provider_name}) {\n    const auth = Firebase.auth();\n    const provider_method = popup ? 'signInWithPopup' : 'signInWithRedirect';\n    const dedicated_providers = ['Google', 'Facebook', 'Twitter', 'Github'];\n    const oauth_providers = ['Yahoo', 'Microsoft', 'Apple'];\n\n    function invalidMode () {\n      //throw new Error(`Invalid auth mode: ${provider_name}`);\n    }\n\n    let result;\n    if (provider_name.includes('Email')) {\n      let action;\n      if (provider_name === 'EmailSignin') {\n        action = 'signInWithEmailAndPassword';\n      } else if (provider_name === 'EmailSignup') {\n        action = 'createUserWithEmailAndPassword';\n      } else {\n        invalidMode();\n      }\n\n      result = await auth[action](email, password);\n\n      if (action === 'createUserWithEmailAndPassword') {\n        result = await auth.currentUser.sendEmailVerification();\n      }\n    } else if (dedicated_providers.includes(provider_name)) {\n      const Provider = Firebase.auth[`${provider_name}AuthProvider`];\n      const provider = new Provider();\n      result = await auth[provider_method](provider);\n    } else if (oauth_providers.includes(provider_name)) {\n      const domain = `${provider_name.toLowerCase()}.com`;\n      const provider = new Firebase.auth.OAuthProvider(domain);\n      result = await auth[provider_method](provider);\n    } else {\n      invalidMode();\n    }\n\n    return result;\n  }\n\n  function end () {\n    return Firebase.auth().signOut();\n  }\n\n  function reload () {\n    // TODO: implement reload\n  }\n\n  let $body;\n  if (loaded) {\n    $body = children({user});\n  } else {\n    $body = (\n      <Loading\n        user={user}\n        error={error}\n        reload={reload}\n      />\n    );\n  }\n\n  return (\n    <SessionContext.Provider\n      value={{\n        loaded,\n        error,\n        user,\n        start,\n        reload,\n        end\n      }}\n    >\n      {$body}\n    </SessionContext.Provider>\n  );\n}\n\nSessionProvider.propTypes = {\n  children: PropTypes.func,\n  client: PropTypes.object,\n  SessionUser: PropTypes.func,\n  Loading: PropTypes.func,\n  popup: PropTypes.bool\n};\n\nconst {Consumer: SessionConsumer} = SessionContext;\n\nfunction useSession () {\n  return useContext(SessionContext);\n}\n\nfunction useSessionUser () {\n  const session = useSession();\n  return session.user;\n}\n\nexport {\n  SessionContext,\n  SessionConsumer,\n  SessionProvider,\n  useSession,\n  useSessionUser\n};\n","import gql from 'graphql-tag';\nimport {ApolloClient} from 'apollo-client';\nimport {setContext} from 'apollo-link-context';\nimport {createHttpLink} from 'apollo-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\n\nexport default function getClient ({uri}) {\n  const http_link = createHttpLink({uri});\n\n  const auth_link = setContext(async (request, prev_context)=> {\n    const {headers = {}} = prev_context;\n    const token = await getToken();\n    if (token) {\n      headers.authorization = token ? `Bearer ${token}` : '';\n    }\n    return {headers};\n  });\n\n  const link = auth_link.concat(http_link);\n  const cache = new InMemoryCache();\n  const client = new ApolloClient({link, cache});\n\n  async function getToken () {\n    const query = gql`\n      {\n        token @client\n      }\n    `;\n    const {data} = await client.query({query});\n    return data.token;\n  }\n\n  function setToken (token) {\n    return client.writeData({data: {token}});\n  }\n\n  function clearToken () {\n    return setToken(null);\n  }\n\n  client.setToken = setToken;\n  client.clearToken = clearToken;\n\n  clearToken();\n  return client;\n}\n","import * as React from 'react';\nimport {\n  useEffect,\n  useState\n} from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function PageContainer ({\n  Loading,\n  Error,\n  match,\n  client\n}) {\n  const {params, route} = match;\n  const {page: Page} = route;\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(null);\n\n  useEffect(()=> {\n    let unmounted = false;\n    async function runQuery () {\n      if (unmounted) {\n        return;\n      }\n\n      if (!Page.query) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const page_query = Page.query(params);\n        const {data} = await client.query(page_query);\n        setData(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    runQuery();\n\n    return ()=> {\n      unmounted = true;\n    };\n  }, []);\n\n  let body;\n  if (loading) {\n    body = (\n      <Loading/>\n    );\n  } else if (error) {\n    body = (\n      <Error error={error}/>\n    );\n  } else {\n    body = (\n      <Page\n        params={params}\n        route={route}\n        {...data}\n      />\n    );\n  }\n\n  return body;\n}\n\nPageContainer.propTypes = {\n  Loading: PropTypes.func,\n  Error: PropTypes.func,\n  match: PropTypes.object,\n  client: PropTypes.object\n};\n","const config = {\n  // Parcel requires explicit env vars\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n  measurementId: process.env.FIREBASE_MEASUREMENT_ID\n};\n\nexport default config;\n"],"names":["getGraphQLErrorCode","error","code","get","SessionContext","createContext","SessionProvider","client","children","SessionUser","Loading","popup","loaded","setLoaded","useState","setError","user","_setUser","setUser","data","reload","$body","useEffect","unsubscribe","Firebase","auth","onAuthStateChanged","async","firebase_user","token","getIdToken","setToken","load","clearToken","h","Provider","value","start","email","password","provider","provider_name","provider_method","result","includes","action","currentUser","sendEmailVerification","domain","toLowerCase","OAuthProvider","end","signOut","propTypes","PropTypes","func","object","bool","Consumer","SessionConsumer","useSession","useContext","useSessionUser","getClient","uri","http_link","createHttpLink","link","setContext","request","prev_context","headers","query","gql","getToken","authorization","concat","cache","InMemoryCache","ApolloClient","writeData","PageContainer","Error","match","params","route","page","Page","loading","setLoading","setData","body","unmounted","page_query","runQuery","config","apiKey","process","env","FIREBASE_API_KEY","authDomain","FIREBASE_AUTH_DOMAIN","databaseURL","FIREBASE_DATABASE_URL","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_APP_ID","measurementId","FIREBASE_MEASUREMENT_ID"],"mappings":"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"}