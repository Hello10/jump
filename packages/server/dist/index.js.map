{"version":3,"sources":["Authorizers.js","timestampsToDates.js","Errors.js","Collection.js","Logger.js","Controller.js","getToken.js","makeSchema.js","getUserIdFromToken.js","contextBuilder.js","graphqlHandler.js","initializeFirebase.js","index.js"],"names":["isSignedIn","context","user_id","isPublic","timestampsToDates","obj","type","constructor","name","map","Object","keys","reduce","result","k","toDate","GraphQLError","ApolloError","code","message","params","Function","expected","is","DocumentDoesNotExistError","id","ResolverMissingError","path","ResolverAuthorizerMissingError","SessionUserNotFoundError","NotAuthorizedError","AuthTokenError","Collection","get","args","getCollection","getLoader","Error","db","Admin","firestore","collection","doc","loader","DataLoader","ids","getMany","add","data","timestamp","_timestampField","created_at","updated_at","ref","set","merge","addOrSetByField","field","x","value","findOneByField","getOrAddById","user","exists","snap","assert","error","_doesNotExistError","_snapToDoc","length","uniques","refs","docs","getAll","docs_by_id","find","where","limit","order_by","select","query","invalid","parts","entries","Array","isArray","part","op","orderBy","findOne","delete","Promise","resolve","batch","commit","FieldValue","serverTimestamp","_deleteField","_id","Logger","child","levels","level","prototype","console","global","log","call","APOLLO_UNION_RESOLVER_NAME","Controller","logger","resolvers","expose","groups","group","definition","info","resolver","authorizer","every","isFunction","debug","auth_error","request","list","create","update","load","loadMany","resolveType","getType","schema","stub","getToken","header","prefix","match","replace","makeSchema","Schema","Controllers","Scalars","controller","typeDefs","getUserIdFromToken","token","auth","decoded","verifyIdToken","uid","contextBuilder","Collections","user_collection","req","loaders","arg","User","graphqlHandler","getTokenDefault","options","handler","ApolloServer","createHandler","Functions","https","onRequest","initializeFirebase","getServiceAccount","env","service_account","process","NODE_ENV","credential","cert","project_id","database_url","initializeApp","databaseURL"],"mappings":";AAMC,aANM,SAASA,GAAY,QAACC,IACpB,QAAEA,EAAQC,QAGZ,SAASC,IACP,OAAA,EACR,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,QAAA,SAAA;;ACSA,aAfc,SAASC,EAAmBC,GAEjCC,OADKD,MAAAA,OAAAA,EAAAA,EAAKE,YAAYC,MAEvB,IAAA,QACIH,OAAAA,EAAII,IAAIL,GACZ,IAAA,SACIM,OAAAA,OAAOC,KAAKN,GAAKO,OAAO,CAACC,EAAQC,KACtCD,EAAOC,GAAKV,EAAkBC,EAAIS,IAC3BD,GACN,IACA,IAAA,YACIR,OAAAA,EAAIU,SACb,QACSV,OAAAA,GAEZ,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;AC2DgD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,QAAA,mBAAA,QAAA,yBAAA,QAAA,+BAAA,QAAA,qBAAA,QAAA,0BAAA,QAAA,kBAAA,EA1EjD,IAAA,EAAA,QAAA,iCAKO,MAAMW,UAAqBC,EAA3B,YACLV,aAAa,KACXW,EAAO,eADI,QAEXC,EAAU,gBAFC,OAGXC,IAEID,EAAQZ,cAAgBc,WAC1BF,EAAUA,EAAQC,IAEdD,MAAAA,EAASD,EAAME,GAChBE,KAAAA,UAAW,EAGlBC,GAAIL,GACM,OAAA,KAAKA,OAASA,GAuDuB,QAAA,aAAA,EAnD1C,MAAMM,UAAkCR,EAC7CT,YAAaa,GACL,MAAA,KAACd,EAAD,GAAOmB,GAAML,EACb,MAAA,CACJF,KAAM,uBACNC,oBAAqBb,aAAgBmB,mBACrCL,OAAAA,KA6C2C,QAAA,0BAAA,EAxC1C,MAAMM,UAA6BV,EACxCT,YAAaa,GACL,MAAA,CACJF,KAAM,kBACNC,6BAA8BC,EAAOO,OACrCP,OAAAA,KAmC2C,QAAA,qBAAA,EA9B1C,MAAMQ,UAAuCZ,EAClDT,YAAaa,GACL,MAAA,CACJF,KAAM,4BACNC,wCAAyCC,EAAOO,OAChDP,OAAAA,KAyB2C,QAAA,+BAAA,EApB1C,MAAMS,UAAiCb,EAC5CT,YAAaa,GACL,MAAA,CACJF,KAAM,sBACNC,mCAAoCC,EAAOK,KAC3CL,OAAAA,KAe2C,QAAA,yBAAA,EAV1C,MAAMU,UAA2Bd,EACtCT,YAAaa,GACL,MAAA,CACJF,KAAM,gBACNC,oCAAqCC,EAAOO,OAC5CP,OAAAA,KAK2C,QAAA,mBAAA,EAA1C,MAAMW,UAAuBf,EAClCT,YAAaa,GACL,MAAA,KAACF,EAAD,QAAOC,GAAWC,EAClB,MAAA,CACJF,KAAM,YACNC,4BAA6BD,MAASC,IACtCC,OAAAA,KAN2C,QAAA,eAAA;;ACnEjB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAPhC,IAAA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,eACA,EAAA,QAAA,UAEA,EAAA,EAAA,QAAA,wBACA,EAAA,QAAA,YAEgC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAjB,MAAMY,EACZC,WAAKC,GACH,OAAA,IAAI,KAAKA,GAGlB3B,aAAa,cAAC4B,EAAD,UAAgBC,IACtBD,KAAAA,cAAgBA,EAChBC,KAAAA,UAAYA,EAGf5B,WACI,MAAA,IAAI6B,MAAM,+CAGdC,SACKC,OAAAA,EAAMC,QAAAA,YAGXC,iBACK,OAAA,KAAKH,GAAGG,WAAW,KAAKjC,MAGjCkC,IAAKjB,GACI,OAAA,KAAKgB,WAAWC,IAAIjB,GAGzBkB,aACK,OAAA,IAAIC,EAAJ,QAAgBC,GACd,KAAKC,QAAQ,CAACD,IAAAA,KAOnBE,WAAK,KAACC,IACVA,GAAO,EAAKA,EAAAA,MAAAA,EAAM,MACZC,MAAAA,EAAY,KAAKC,kBACvBF,EAAKG,WAAaF,EAClBD,EAAKI,WAAaH,EACZI,MAAAA,QAAY,KAAKZ,WAAWM,IAAIC,GAE/BA,OADPA,EAAKvB,GAAK4B,EAAI5B,GACPuB,EAGHM,WAAK,GAAC7B,EAAD,KAAKuB,EAAL,MAAWO,GAAQ,KAC5BP,GAAO,EAAKA,EAAAA,MAAAA,EAAM,OACbI,WAAa,KAAKF,kBACjBG,MAAAA,EAAM,KAAKX,IAAIjB,GAEd,aADD4B,EAAIC,IAAIN,EAAM,CAACO,MAAAA,IACd,KAAKtB,IAAI,CAACR,GAAAA,IAGb+B,uBAAiB,MAACC,EAAD,KAAQT,EAAR,IAAcD,EAAOW,CAAAA,GAAKA,KACzCC,MAAAA,EAAQX,EAAKS,GACbf,QAAY,KAAKkB,eAAeH,EAApB,CAA2BE,GACzCjB,GAAAA,EAAK,CACD,MAAA,GAACjB,GAAMiB,EACN,OAAA,KAAKY,IAAI,CAAC7B,GAAAA,EAAIuB,KAAAA,IAGd,OADPA,QAAaD,EAAIC,GACV,KAAKD,IAAI,CAACC,KAAAA,IAIfa,oBAAc,GAACpC,EAAD,KAAKuB,EAAL,IAAWD,EAAOW,CAAAA,GAAKA,KACrCI,IAAAA,QAAa,KAAK7B,IAAI,CAACR,GAAAA,IAKpBqC,OAJFA,IACHd,QAAaD,EAAI,CAACtB,GAAAA,EAAIuB,KAAAA,IACtBc,QAAa,KAAKR,IAAI,CAAC7B,GAAAA,EAAIuB,KAAAA,EAAMO,OAAO,KAEnCO,EAGHC,aAAQtC,GACN4B,MAAAA,EAAM,KAAKX,IAAIjB,GAEduC,aADYX,EAAIpB,OACX8B,OAGR9B,WAAK,GAACR,EAAD,OAAKwC,GAAS,IACjBZ,MAAAA,EAAM,KAAKX,IAAIjB,GACfuC,QAAaX,EAAIpB,MACnBgC,GAAAA,IAAWD,EAAKD,OAAQ,CAEpBG,MADQ,KAAKC,mBAAmB1C,GAGjC,OAAA,KAAK2C,WAAWJ,GAGnBlB,eAAS,IAACD,IACV,IAACA,GAAsB,IAAfA,EAAIwB,OACP,MAAA,GAGHC,MACAC,GADU,EAAK1B,EAAAA,MAAAA,GACApC,IAAKgB,GAAM,KAAKiB,IAAIjB,IAEnC+C,SADc,KAAKlC,GAAGmC,OAAOF,IAChB9D,IAAKuD,GAAQ,KAAKI,WAAWJ,IAE1CU,EAAa,GACd,IAAA,MAAMhC,KAAO8B,EACZ9B,IACFgC,EAAWhC,EAAIjB,IAAMiB,GAIlBG,OAAAA,EAAIpC,IAAKgB,GACNA,KAAMiD,EAAcA,EAAWjD,GAAM,MAI3CkD,YAAM,MAACC,EAAD,MAAQC,EAAR,SAAeC,EAAf,OAAyBC,GAAU,IACzCC,IAAAA,EAAQ,KAAKvC,WAERwC,SAAAA,EAASxB,GACV,MAAA,IAAIpB,iBAAiBoB,cAGzBmB,GAAAA,EAAO,CACLM,IAAAA,GACA,EAASN,EAAAA,UAAAA,GACXM,EAAQxE,OAAOyE,QAAQP,GAAOnE,IAAI,EAAEgD,EAAOE,KAClC,CAACF,EAAO,KAAME,IAEdyB,MAAMC,QAAQT,GACvBM,EAAQE,MAAMC,QAAQT,EAAM,IAAMA,EAAQ,CAACA,GAE3CK,EAAQ,SAGL,IAAA,MAAMK,KAAQJ,EAAO,CACJ,IAAhBI,EAAKjB,QACPY,EAAQ,SAEJ,MAACxB,EAAO8B,EAAI5B,GAAS2B,EAC3BN,EAAQA,EAAMJ,MAAMnB,EAAO8B,EAAI5B,IA2B5BK,OAvBHc,IACGM,MAAMC,QAAQP,KACjBA,EAAW,CAACA,IAEdE,EAAQA,EAAMQ,WAAWV,IAIvBD,KACG,EAASA,EAAAA,UAAAA,IACZI,EAAQ,SAEVD,EAAQA,EAAMH,MAAMA,IAGlBE,IACGK,MAAMC,QAAQN,IACjBE,EAAQ,UAEVD,EAAQA,EAAMD,UAAUA,WAGPC,EAAM/C,OACbuC,KAAK/D,IAAI,KAAK2D,YAGtBqB,eAAS,MAACb,EAAD,SAAQE,EAAR,OAAkBC,IACzBP,MAAAA,QAAa,KAAKG,KAAK,CAC3BE,MAAO,EACPD,MAAAA,EACAE,SAAAA,EACAC,OAAAA,IAEMP,OAAAA,EAAKH,OAAS,EAAKG,EAAK,GAAK,KAGvCZ,eAAgBH,GACNE,OAAAA,GACC,KAAK8B,QAAQ,CAClBb,MAAO,CAACnB,EAAO,KAAME,KAKrB+B,cAAQ,GAACjE,EAAD,IAAKoB,EAAL,MAAU+B,IAClBnD,GAAAA,EAAI,CAEC4B,OADK,KAAKX,IAAIjB,GACViE,SAGT7C,GAAAA,GAAO+B,EACH,MAAA,IAAIvC,MAAM,iDAGduC,GAAAA,EAAO,CAET/B,SADmB,KAAK8B,KAAK,CAACC,MAAAA,KACnBnE,IAAI,EAAEgB,GAAAA,KAAOA,GAGtBoB,GAAe,IAAfA,EAAIwB,OACCsB,OAAAA,QAAQC,UAGXC,MAAAA,EAAQ,KAAKvD,GAAGuD,QACjB,IAAA,MAAMpE,KAAMoB,EAAK,CACdQ,MAAAA,EAAM,KAAKX,IAAIjB,GACrBoE,EAAMH,OAAOrC,GAERwC,OAAAA,EAAMC,SAOf5C,kBACSX,OAAAA,EAAMC,QAAAA,UAAUuD,WAAWC,kBAGpCC,eACS1D,OAAAA,EAAMC,QAAAA,UAAUuD,WAAWL,SAGpCtB,WAAYJ,GACNA,GAAAA,EAAKD,OAAQ,CACTf,MAAAA,EAAOgB,EAAKhB,OAEX,OADPA,EAAKvB,GAAKuC,EAAKvC,IACR,EAAkBuB,EAAAA,SAAAA,GAElB,OAAA,KAIXmB,mBAAoB1C,GACZnB,MAAAA,EAAO,KAAKE,OACX,OAAA,IAAIgB,EAAJ,0BAA8B,CAAClB,KAAAA,EAAMmB,GAAAA,IAG9CyE,MAES7C,OADK,KAAKZ,WAAWC,MACjBjB,IAhPiB,QAAA,QAAA;;ACM/B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAbc,MAAM0E,EACnBC,QACS,OAAA,MAWV,QAAA,QAAA,EAPD,MAAMC,EAAS,CAAC,QAAS,QAAS,OAAQ,OAAQ,QAAS,SAC3D,IAAK,MAAMC,KAASD,EAClBF,EAAOI,UAAUD,GAAS,YAAiBpE,GACnC,MAAA,QAACsE,GAAWC,OACZC,EAAOJ,KAASE,EAAWA,EAAQF,GAASE,EAAQE,IACnDA,OAAAA,EAAIC,KAAKH,KAAYtE;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAXhC,IAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,aACA,EAAA,QAAA,YASgC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAFhC,MAAM0E,EAA6B,gBAEpB,MAAMC,EACnBtG,aAAa,OAACuG,GAAU,IACjBA,IACHA,EAAS,IAAIX,EAAJ,SAENW,KAAAA,OAASA,EAGZtG,WACI,MAAA,IAAI6B,MAAM,oCAGlB0E,YA8BQ,MAAA,IAAI1E,MAAM,yCAGlBI,YAAY,QAACxC,EAAD,KAAUO,IACbP,OAAAA,EAAQkC,cAAc3B,GAAQ,KAAKA,MAG5CmC,QAAQ,QAAC1C,EAAD,KAAUO,IACTP,OAAAA,EAAQmC,UAAU5B,GAAQ,KAAKA,MAGxCwG,SACQnG,MAAAA,EAAS,IACT,OAACiG,GAAU,KAEXG,EAAS,KAAKF,YACf,IAAA,MAAOzG,EAAM4G,KAAUxG,OAAOyE,QAAQ8B,GAAS,CAC5C3G,KAAQO,IACZA,EAAOP,GAAQ,IAGZ,IAAA,MAAOE,EAAM2G,KAAezG,OAAOyE,QAAQ+B,GAAQ,CAChDvF,MAAAA,KAAUrB,KAAQE,IAIpBA,GAAAA,IAASoG,EAA4B,CACvC/F,EAAOP,GAAME,GAAQ,EAACH,EAAKJ,EAASmH,IAC3BD,EAAWR,KAAK,KAAM,CAACtG,IAAAA,EAAKJ,QAAAA,EAASmH,KAAAA,KAE9C,SAGI,MAAA,SAACC,EAAD,WAAWC,GAAcH,EAG3B,IADU,CAACE,EAAUC,GAAYC,MAAMC,EAA7B,YAEN,MAAA,IAAInF,yCAAyCV,KAGrDd,EAAOP,GAAME,GAAQ,OAAOH,EAAK6B,EAAMjC,EAASmH,KAC9CN,EAAOW,0BAA0B9F,KAE7B,IACE,IAAC0F,EACG,MAAA,IAAI3F,EAAJ,qBAAyB,CAACC,KAAAA,IAG9B,IAAC2F,EACG,MAAA,IAAI1F,EAAJ,+BAAmC,CAACD,KAAAA,IAGtCP,MAAAA,EAAS,CAACf,IAAAA,EAAK6B,KAAAA,EAAMjC,QAAAA,EAASmH,KAAAA,IAE9B,WAACM,GAAczH,EACjByH,GAAAA,EACIA,MAAAA,EAIJ,WADqBJ,EAAWX,KAAK,KAAMvF,IAEvC,MAAA,IAAIU,EAAJ,mBAAuB,CAACH,KAAAA,IAGzB0F,OAAAA,EAASV,KAAK,KAAMvF,GAC3B,MAAO8C,GACHA,MAAAA,EAAM5C,UACRwF,EAAO5C,MAAMA,EAAO,0BACdA,IAEN4C,EAAO5C,MAAMA,EAAO,4BACd,IAAIlD,EAAJ,kBAMTH,OAAAA,EAQToB,IAAK0F,GAEIlF,OADY,KAAKA,WAAWkF,GACjB1F,IAAI0F,EAAQzF,MAGhC0F,KAAMD,GAEGlF,OADY,KAAKA,WAAWkF,GACjBC,KAAKD,EAAQzF,MAGjC2F,OAAQF,GACAlF,MAAAA,EAAa,KAAKA,WAAWkF,IAC7B,KAAC3E,GAAQ2E,EAAQzF,KAChBO,OAAAA,EAAWM,IAAIC,GAGxB8E,OAAQH,GACAlF,MAAAA,EAAa,KAAKA,WAAWkF,IAC7B,GAAClG,EAAD,KAAKuB,GAAQ2E,EAAQzF,KACpBO,OAAAA,EAAWa,IAAI,CAAC7B,GAAAA,EAAIuB,KAAAA,IAG7B0C,OAAQiC,GACAlF,MAAAA,EAAa,KAAKA,WAAWkF,IAC7B,GAAClG,GAAMkG,EAAQzF,KACdO,OAAAA,EAAWiD,OAAO,CAACjE,GAAAA,IAG5BsG,MAAM,WAACtF,EAAD,MAAagB,IACV,MAAA,EAAEpD,IAAAA,EAAKJ,QAAAA,MACN0C,MAAAA,EAAS1C,EAAQmC,UAAUK,GAC3BhB,EAAKpB,EAAIoD,GACRhC,OAAAA,EAAKkB,EAAOoF,KAAKtG,GAAM,MAIlCuG,UAAU,WAACvF,EAAD,MAAagB,IACd,MAAA,EAAEpD,IAAAA,EAAKJ,QAAAA,MACN0C,MAAAA,EAAS1C,EAAQmC,UAAUK,GAC3BI,EAAMxC,EAAIoD,GACTZ,OAAAA,EAAIwB,OAAS1B,EAAOqF,SAASnF,GAAO,IAI/CoF,YAAaC,GACJ,MAAA,EAAE7H,IAAAA,EAAK+G,KAAAA,MACN9G,MAAAA,EAAO4H,EAAQ7H,GACd+G,OAAAA,EAAKe,OAAOD,QAAQ5H,IAI/B8H,OACQ,MAAA,IAAI/F,MAAM,uBAnLY,QAAA,QAAA;;ACH/B,aARc,SAASgG,EAAUV,GAC1BW,MAAAA,EAASX,EAAQ1F,IAAI,iBACrBsG,EAAS,WACXD,OAAAA,GAAUA,EAAOE,MAAMD,GAClBD,EAAOG,QAAQF,EAAQ,IAEvB,KAEV,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACQA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAhBD,IAAA,EAAA,QAAA,iBACA,EAAA,QAAA,UAEe,SAASG,GAAY,OAACC,EAAD,YAASC,EAAT,QAAsBC,IAClD9B,MAAAA,EAAY,GACb,IAAA,MAAOvG,EAAMqG,KAAenG,OAAOyE,QAAQyD,GAAc,CAC5DpC,QAAQE,2BAA2BlG,KAC7BsI,MAAAA,EAAa,IAAIjC,GACjBE,EAAAA,EAAAA,OAAAA,EAAW+B,EAAW9B,UAIvB,OAFDD,EAAAA,EAAAA,OAAAA,EAAW8B,IAEV,EAAqB,EAAA,sBAAA,CAC1BE,SAAUJ,EACV5B,UAAAA;;ACDH,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAbD,IAAA,EAAA,EAAA,QAAA,mBAEA,EAAA,QAAA,YAWC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GATc,eAAeiC,EAAoBC,GAC5C,IACIC,MAAAA,EAAO3G,EAAM2G,QAAAA,OAEZC,aADeD,EAAKE,cAAcH,IAC1BI,IACf,MAAOnF,GACD,MAAA,KAAChD,EAAD,QAAOC,GAAW+C,EAClB,MAAA,IAAInC,EAAJ,eAAmB,CAACb,KAAAA,EAAMC,QAAAA;;ACwCnC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAnDD,IAAA,EAAA,EAAA,QAAA,yBAmDC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjDc,SAASmI,GAAgB,YAACC,EAAD,SAAclB,EAAd,gBAAwBmB,IACvD,OAAA,OAAQC,IAAAA,MACPC,MAAAA,EAAU,GACPtH,SAAAA,EAAWuH,GACZnJ,MAAAA,EAAOmJ,EAAInJ,MAAQmJ,EACrB,KAAEnJ,KAAQkJ,GAAU,CAChBjH,MAAAA,EAAaN,EAAc3B,GACjCkJ,EAAQlJ,GAAQiC,EAAWE,OAEtB+G,OAAAA,EAAQlJ,GAGR2B,SAAAA,EAAewH,GAChBnJ,MAAAA,EAAOmJ,EAAInJ,MAAQmJ,EACnB3H,EAAauH,EAAY/I,GAC3B,IAACwB,EACG,MAAA,IAAIK,8BAA8B7B,oBAGnCwB,OAAAA,EAAWC,IAAI,CACpBE,cAAAA,EACAC,UAAAA,IAIAlC,IAAAA,EAAU,KACV4D,EAAO,KACP4D,EAAa,KAEXuB,MAAAA,EAAQZ,EAASoB,GACnBR,GAAAA,EACE,IACIW,MAAAA,EAAOzH,EAAcqH,GAC3BtJ,QAAgB,EAAmB+I,EAAAA,SAAAA,GACnCnF,QAAa8F,EAAK3H,IAAI,CAACR,GAAIvB,IAC3B,MAAOgE,GACPwD,EAAaxD,EAIV,MAAA,CACL/B,cAAAA,EACAC,UAAAA,EACAsF,WAAAA,EACAuB,MAAAA,EACA/I,QAAAA,EACA4D,KAAAA;;ACxBL,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAxBD,IAAA,EAAA,EAAA,QAAA,uBACA,EAAA,QAAA,iCAEA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,eAmBC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAjBc,SAAS+F,GAAgB,OACtClB,EADsC,QAEtCE,EAFsC,YAGtCD,EAHsC,YAItCW,EAJsC,QAKtCtJ,EALsC,SAMtCoI,EAAWyB,EAN2B,QAAA,gBAOtCN,EAAkB,OAPoB,QAQtCO,EAAU,KAEL9J,IACHA,GAAU,EAAe,EAAA,SAAA,CAACsJ,YAAAA,EAAalB,SAAAA,EAAUmB,gBAAAA,KAE7CrB,MAAAA,GAAS,EAAW,EAAA,SAAA,CAACQ,OAAAA,EAAQC,YAAAA,EAAaC,QAAAA,IAE1CmB,EADS,IAAIC,EAAJ,aAAiB,CAAC9B,OAAAA,EAAQlI,QAAAA,IAClBiK,cAAcH,GAC9BI,OAAAA,EAAUC,MAAMC,UAAUL;;ACVlC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAbD,IAAA,EAAA,EAAA,QAAA,mBAaC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAXc,SAASM,GAAoB,kBAACC,IACrCC,MACAC,EAAkBF,EADZG,QAAQF,IAAIG,UAElBC,EAAarI,EAAMqI,QAAAA,WAAWC,KAAKJ,IACnC,WAACK,GAAcL,EACfM,aAA0BD,mBAE1BE,EAAAA,QAAAA,cAAc,CAClBJ,WAAAA,EACAK,YAAaF;;ACLjB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,qBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,QAAA,OAAA,QAAA,iBAAA,EANA,IAAA,EAAA,EAAA,QAAA,kBAMA,QAAA,YAAA,EALA,IAAA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,aAGA,QAAA,OAAA,EAFA,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,yBAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["export function isSignedIn ({context}) {\n  return !!context.user_id;\n}\n\nexport function isPublic () {\n  return true;\n}\n","export default function timestampsToDates (obj) {\n  const type = obj?.constructor.name;\n  switch (type) {\n    case 'Array':\n      return obj.map(timestampsToDates);\n    case 'Object':\n      return Object.keys(obj).reduce((result, k)=> {\n        result[k] = timestampsToDates(obj[k]);\n        return result;\n      }, {});\n    case 'Timestamp':\n      return obj.toDate();\n    default:\n      return obj;\n  }\n}\n","import {ApolloError} from 'apollo-server-cloud-functions';\n\n// TODO: remove once update eslint dep\n/*eslint max-classes-per-file: [\"error\", 100] */\n\nexport class GraphQLError extends ApolloError {\n  constructor ({\n    code = 'GraphQLError',\n    message = 'GraphQL error',\n    params\n  }) {\n    if (message.constructor === Function) {\n      message = message(params);\n    }\n    super(message, code, params);\n    this.expected = true;\n  }\n\n  is (code) {\n    return (this.code === code);\n  }\n}\n\nexport class DocumentDoesNotExistError extends GraphQLError {\n  constructor (params) {\n    const {type, id} = params;\n    super({\n      code: 'DocumentDoesNotExist',\n      message: `Document ${type} with id ${id} does not exist`,\n      params\n    });\n  }\n}\n\nexport class ResolverMissingError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'ResolverMissing',\n      message: `Resolver missing: ${params.path}`,\n      params\n    });\n  }\n}\n\nexport class ResolverAuthorizerMissingError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'ResolverAuthorizerMissing',\n      message: `Resolver permission missing: ${params.path}`,\n      params\n    });\n  }\n}\n\nexport class SessionUserNotFoundError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'SessionUserNotFound',\n      message: `Session user not found: ${params.id}`,\n      params\n    });\n  }\n}\n\nexport class NotAuthorizedError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'NotAuthorized',\n      message: `Not authorized to access ${params.path}`,\n      params\n    });\n  }\n}\n\nexport class AuthTokenError extends GraphQLError {\n  constructor (params) {\n    const {code, message} = params;\n    super({\n      code: 'AuthToken',\n      message: `Auth token error ${code}: ${message}`,\n      params\n    });\n  }\n}\n","import Admin from 'firebase-admin';\nimport DataLoader from 'dataloader';\nimport {omit, uniq, isNumber, isObject} from 'lodash';\n\nimport timestampsToDates from './timestampsToDates';\nimport {DocumentDoesNotExistError} from './Errors';\n\nexport default class Collection {\n  static get (args) {\n    return new this(args);\n  }\n\n  constructor ({getCollection, getLoader}) {\n    this.getCollection = getCollection;\n    this.getLoader = getLoader;\n  }\n\n  get name () {\n    throw new Error('Collection child class must implement .name');\n  }\n\n  get db () {\n    return Admin.firestore();\n  }\n\n  get collection () {\n    return this.db.collection(this.name);\n  }\n\n  doc (id) {\n    return this.collection.doc(id);\n  }\n\n  get loader () {\n    return new DataLoader((ids)=> {\n      return this.getMany({ids});\n    });\n  }\n\n  //////////\n  // CRUD //\n  //////////\n  async add ({data}) {\n    data = omit(data, 'id');\n    const timestamp = this._timestampField();\n    data.created_at = timestamp;\n    data.updated_at = timestamp;\n    const ref = await this.collection.add(data);\n    data.id = ref.id;\n    return data;\n  }\n\n  async set ({id, data, merge = true}) {\n    data = omit(data, 'id');\n    data.updated_at = this._timestampField();\n    const ref = this.doc(id);\n    await ref.set(data, {merge});\n    return this.get({id});\n  }\n\n  async addOrSetByField ({field, data, add = (x)=> x}) {\n    const value = data[field];\n    const doc = await this.findOneByField(field)(value);\n    if (doc) {\n      const {id} = doc;\n      return this.set({id, data});\n    } else {\n      data = await add(data);\n      return this.add({data});\n    }\n  }\n\n  async getOrAddById ({id, data, add = (x)=> x}) {\n    let user = await this.get({id});\n    if (!user) {\n      data = await add({id, data});\n      user = await this.set({id, data, merge: false});\n    }\n    return user;\n  }\n\n  async exists (id) {\n    const ref = this.doc(id);\n    const snap = await ref.get();\n    return snap.exists;\n  }\n\n  async get ({id, assert = false}) {\n    const ref = this.doc(id);\n    const snap = await ref.get();\n    if (assert && !snap.exists) {\n      const error = this._doesNotExistError(id);\n      throw error;\n    }\n    return this._snapToDoc(snap);\n  }\n\n  async getMany ({ids}) {\n    if (!ids || ids.length === 0) {\n      return [];\n    }\n\n    const uniques = uniq(ids);\n    const refs = uniques.map((id)=> this.doc(id));\n    const snaps = await this.db.getAll(refs);\n    const docs = snaps.map((snap)=> this._snapToDoc(snap));\n\n    const docs_by_id = {};\n    for (const doc of docs) {\n      if (doc) {\n        docs_by_id[doc.id] = doc;\n      }\n    }\n\n    return ids.map((id)=> {\n      return (id in docs_by_id) ? docs_by_id[id] : null;\n    });\n  }\n\n  async find ({where, limit, order_by, select} = {}) {\n    let query = this.collection;\n\n    function invalid (field) {\n      throw new Error(`Invalid ${field} for find`);\n    }\n\n    if (where) {\n      let parts;\n      if (isObject(where)) {\n        parts = Object.entries(where).map(([field, value])=> {\n          return [field, '==', value];\n        });\n      } else if (Array.isArray(where)) {\n        parts = Array.isArray(where[0]) ? where : [where];\n      } else {\n        invalid('where');\n      }\n\n      for (const part of parts) {\n        if (part.length !== 3) {\n          invalid('where');\n        }\n        const [field, op, value] = part;\n        query = query.where(field, op, value);\n      }\n    }\n\n    if (order_by) {\n      if (!Array.isArray(order_by)) {\n        order_by = [order_by];\n      }\n      query = query.orderBy(...order_by);\n    }\n\n\n    if (limit) {\n      if (!isNumber(limit)) {\n        invalid('limit');\n      }\n      query = query.limit(limit);\n    }\n\n    if (select) {\n      if (!Array.isArray(select)) {\n        invalid('select');\n      }\n      query = query.select(...select);\n    }\n\n    const snap = await query.get();\n    return snap.docs.map(this._snapToDoc);\n  }\n\n  async findOne ({where, order_by, select}) {\n    const docs = await this.find({\n      limit: 1,\n      where,\n      order_by,\n      select\n    });\n    return (docs.length > 0) ? docs[0] : null;\n  }\n\n  findOneByField (field) {\n    return (value)=> {\n      return this.findOne({\n        where: [field, '==', value]\n      });\n    };\n  }\n\n  async delete ({id, ids, where}) {\n    if (id) {\n      const ref = this.doc(id);\n      return ref.delete();\n    }\n\n    if (ids && where) {\n      throw new Error('Delete call should pass ids or where not both');\n    }\n\n    if (where) {\n      const docs = await this.find({where});\n      ids = docs.map(({id})=> id);\n    }\n\n    if (ids.length === 0) {\n      return Promise.resolve();\n    }\n\n    const batch = this.db.batch();\n    for (const id of ids) {\n      const ref = this.doc(id);\n      batch.delete(ref);\n    }\n    return batch.commit();\n  }\n\n  /////////////\n  // Helpers //\n  /////////////\n\n  _timestampField () {\n    return Admin.firestore.FieldValue.serverTimestamp();\n  }\n\n  _deleteField () {\n    return Admin.firestore.FieldValue.delete();\n  }\n\n  _snapToDoc (snap) {\n    if (snap.exists) {\n      const data = snap.data();\n      data.id = snap.id;\n      return timestampsToDates(data);\n    } else {\n      return null;\n    }\n  }\n\n  _doesNotExistError (id) {\n    const type = this.name();\n    return new DocumentDoesNotExistError({type, id});\n  }\n\n  _id () {\n    const ref = this.collection.doc();\n    return ref.id;\n  }\n}\n","export default class Logger {\n  child () {\n    return this;\n  }\n}\n\nconst levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\nfor (const level of levels) {\n  Logger.prototype[level] = function log (...args) {\n    const {console} = global;\n    const log = (level in console) ? console[level] : console.log;\n    return log.call(console, ...args);\n  };\n}\n","import {isFunction} from 'lodash';\nimport Logger from './Logger';\nimport {\n  GraphQLError,\n  ResolverMissingError,\n  ResolverAuthorizerMissingError,\n  NotAuthorizedError\n} from './Errors';\n\nconst APOLLO_UNION_RESOLVER_NAME = '__resolveType';\n\nexport default class Controller {\n  constructor ({logger} = {}) {\n    if (!logger) {\n      logger = new Logger();\n    }\n    this.logger = logger;\n  }\n\n  get name () {\n    throw new Error('Child class must implement .name');\n  }\n\n  resolvers () {\n    // Child class should implement this method and return\n    // an object with this shape:\n    //\n    // {\n    //   // Mutations resolved in this controller\n    //   Mutation: {\n    //     <MutationName>: {\n    //       resolver: Function,\n    //       authorizer: Function\n    //     }\n    //   },\n    //   // Queries resolved in this controller\n    //   Query: {\n    //     <QueryName>: {\n    //       resolver: Function,\n    //       authorizer: Function\n    //     }\n    //   },\n    //   // Type fields resolved in this controller\n    //   <TypeName>: {\n    //     <FieldName>: {\n    //       resolver: Function,\n    //       authorizer: Function\n    //     }\n    //   },\n    //   <UnionTypeName>: {\n    //     __resolveType: Function\n    //   }\n    // }\n    throw new Error('Child class must implement .resolvers');\n  }\n\n  collection ({context, name}) {\n    return context.getCollection(name || this.name);\n  }\n\n  loader ({context, name}) {\n    return context.getLoader(name || this.name);\n  }\n\n  expose () {\n    const result = {};\n    const {logger} = this;\n\n    const groups = this.resolvers();\n    for (const [type, group] of Object.entries(groups)) {\n      if (!(type in result)) {\n        result[type] = {};\n      }\n\n      for (const [name, definition] of Object.entries(group)) {\n        const path = `${type}.${name}`;\n\n        // Resolve Union types\n        // https://www.apollographql.com/docs/graphql-tools/resolvers/#unions-and-interfaces\n        if (name === APOLLO_UNION_RESOLVER_NAME) {\n          result[type][name] = (obj, context, info)=> {\n            return definition.call(this, {obj, context, info});\n          };\n          continue;\n        }\n\n        const {resolver, authorizer} = definition;\n\n        const valid = [resolver, authorizer].every(isFunction);\n        if (!valid) {\n          throw new Error(`Invalid resolver definition for ${path}`);\n        }\n\n        result[type][name] = async (obj, args, context, info)=> {\n          logger.debug(`Calling resolver ${path}`);\n\n          try {\n            if (!resolver) {\n              throw new ResolverMissingError({path});\n            }\n\n            if (!authorizer) {\n              throw new ResolverAuthorizerMissingError({path});\n            }\n\n            const params = {obj, args, context, info};\n\n            const {auth_error} = context;\n            if (auth_error) {\n              throw auth_error;\n            }\n\n            const authorized = await authorizer.call(this, params);\n            if (!authorized) {\n              throw new NotAuthorizedError({path});\n            }\n\n            return resolver.call(this, params);\n          } catch (error) {\n            if (error.expected) {\n              logger.error(error, 'Expected GraphQL error');\n              throw error;\n            } else {\n              logger.error(error, 'Unexpected GraphQL error');\n              throw new GraphQLError();\n            }\n          }\n        };\n      }\n    }\n    return result;\n  }\n\n\n  ///////////////////////\n  // Generic Resolvers //\n  ///////////////////////\n\n  get (request) {\n    const collection = this.collection(request);\n    return collection.get(request.args);\n  }\n\n  list (request) {\n    const collection = this.collection(request);\n    return collection.list(request.args);\n  }\n\n  create (request) {\n    const collection = this.collection(request);\n    const {data} = request.args;\n    return collection.add(data);\n  }\n\n  update (request) {\n    const collection = this.collection(request);\n    const {id, data} = request.args;\n    return collection.set({id, data});\n  }\n\n  delete (request) {\n    const collection = this.collection(request);\n    const {id} = request.args;\n    return collection.delete({id});\n  }\n\n  load ({collection, field}) {\n    return ({obj, context})=> {\n      const loader = context.getLoader(collection);\n      const id = obj[field];\n      return id ? loader.load(id) : null;\n    };\n  }\n\n  loadMany ({collection, field}) {\n    return ({obj, context})=> {\n      const loader = context.getLoader(collection);\n      const ids = obj[field];\n      return ids.length ? loader.loadMany(ids) : [];\n    };\n  }\n\n  resolveType (getType) {\n    return ({obj, info})=> {\n      const type = getType(obj);\n      return info.schema.getType(type);\n    };\n  }\n\n  stub () {\n    throw new Error('Unimplemented stub');\n  }\n}\n","export default function getToken (request) {\n  const header = request.get('Authorization');\n  const prefix = /^Bearer /;\n  if (header && header.match(prefix)) {\n    return header.replace(prefix, '');\n  } else {\n    return null;\n  }\n}\n","import {makeExecutableSchema} from 'graphql-tools';\nimport {merge} from 'lodash';\n\nexport default function makeSchema ({Schema, Controllers, Scalars}) {\n  const resolvers = {};\n  for (const [name, Controller] of Object.entries(Controllers)) {\n    console.log(`Exposing controller ${name}`);\n    const controller = new Controller();\n    merge(resolvers, controller.expose());\n  }\n  merge(resolvers, Scalars);\n\n  return makeExecutableSchema({\n    typeDefs: Schema,\n    resolvers\n  });\n}\n","import Admin from 'firebase-admin';\n\nimport {AuthTokenError} from './Errors';\n\nexport default async function getUserIdFromToken (token) {\n  try {\n    const auth = Admin.auth();\n    const decoded = await auth.verifyIdToken(token);\n    return decoded.uid;\n  } catch (error) {\n    const {code, message} = error;\n    throw new AuthTokenError({code, message});\n  }\n}\n","import getUserIdFromToken from './getUserIdFromToken';\n\nexport default function contextBuilder ({Collections, getToken, user_collection}) {\n  return async ({req})=> {\n    const loaders = {};\n    function getLoader (arg) {\n      const name = arg.name || arg;\n      if (!(name in loaders)) {\n        const collection = getCollection(name);\n        loaders[name] = collection.loader;\n      }\n      return loaders[name];\n    }\n\n    function getCollection (arg) {\n      const name = arg.name || arg;\n      const Collection = Collections[name];\n      if (!Collection) {\n        throw new Error(`Collection with name ${name} does not exist`);\n      }\n\n      return Collection.get({\n        getCollection,\n        getLoader\n      });\n    }\n\n    let user_id = null;\n    let user = null;\n    let auth_error = null;\n\n    const token = getToken(req);\n    if (token) {\n      try {\n        const User = getCollection(user_collection);\n        user_id = await getUserIdFromToken(token);\n        user = await User.get({id: user_id});\n      } catch (error) {\n        auth_error = error;\n      }\n    }\n\n    return {\n      getCollection,\n      getLoader,\n      auth_error,\n      token,\n      user_id,\n      user\n    };\n  };\n}\n","import * as Functions from 'firebase-functions';\nimport {ApolloServer} from 'apollo-server-cloud-functions';\n\nimport makeSchema from './makeSchema';\nimport contextBuilder from './contextBuilder';\nimport getTokenDefault from './getToken';\n\nexport default function graphqlHandler ({\n  Schema,\n  Scalars,\n  Controllers,\n  Collections,\n  context,\n  getToken = getTokenDefault,\n  user_collection = 'User',\n  options = {}\n}) {\n  if (!context) {\n    context = contextBuilder({Collections, getToken, user_collection});\n  }\n  const schema = makeSchema({Schema, Controllers, Scalars});\n  const server = new ApolloServer({schema, context});\n  const handler = server.createHandler(options);\n  return Functions.https.onRequest(handler);\n}\n","import Admin from 'firebase-admin';\n\nexport default function initializeFirebase ({getServiceAccount}) {\n  const env = process.env.NODE_ENV;\n  const service_account = getServiceAccount(env);\n  const credential = Admin.credential.cert(service_account);\n  const {project_id} = service_account;\n  const database_url = `https://${project_id}.firebaseio.com`;\n\n  Admin.initializeApp({\n    credential,\n    databaseURL: database_url\n  });\n}\n","import * as Authorizers from './Authorizers';\nimport Collection from './Collection';\nimport Controller from './Controller';\nimport * as Errors from './Errors';\nimport getToken from './getToken';\nimport graphqlHandler from './graphqlHandler';\nimport initializeFirebase from './initializeFirebase';\n\nexport {\n  Authorizers,\n  Collection,\n  Controller,\n  Errors,\n  getToken,\n  graphqlHandler,\n  initializeFirebase\n};\n"]}