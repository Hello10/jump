{"version":3,"file":"index.umd.js","sources":["../src/timestampsToDates.js","../src/Logger.js","../src/Errors.js","../src/Collection.js","../src/Controller.js","../src/getToken.js","../src/Authorizers.js","../src/graphqlHandler.js","../src/contextBuilder.js","../src/getUserIdFromToken.js","../src/makeSchema.js","../src/initializeFirebase.js"],"sourcesContent":["export default function timestampsToDates (obj) {\n  if (!obj) {\n    return obj;\n  }\n  const type = obj.constructor.name;\n  switch (type) {\n    case 'Array':\n      return obj.map(timestampsToDates);\n    case 'Object':\n      return Object.keys(obj).reduce((result, k)=> {\n        result[k] = timestampsToDates(obj[k]);\n        return result;\n      }, {});\n    case 'Timestamp':\n      return obj.toDate();\n    default:\n      return obj;\n  }\n}\n","export default class Logger {\n  child () {\n    return this;\n  }\n}\n\nconst levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\nfor (const level of levels) {\n  Logger.prototype[level] = function log (...args) {\n    const {console} = global;\n    const log = (level in console) ? console[level] : console.log;\n    return log.call(console, ...args);\n  };\n}\n","import {ApolloError} from 'apollo-server-cloud-functions';\n\n// TODO: remove once update eslint dep\n/*eslint max-classes-per-file: [\"error\", 100] */\n\nexport class GraphQLError extends ApolloError {\n  constructor ({\n    code = 'GraphQLError',\n    message = 'GraphQL error',\n    params\n  }) {\n    if (message.constructor === Function) {\n      message = message(params);\n    }\n    super(message, code, params);\n    this.expected = true;\n  }\n\n  is (code) {\n    return (this.code === code);\n  }\n}\n\nexport class DocumentDoesNotExistError extends GraphQLError {\n  constructor (params) {\n    const {type, id} = params;\n    super({\n      code: 'DocumentDoesNotExist',\n      message: `Document ${type} with id ${id} does not exist`,\n      params\n    });\n  }\n}\n\nexport class ResolverMissingError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'ResolverMissing',\n      message: `Resolver missing: ${params.path}`,\n      params\n    });\n  }\n}\n\nexport class ResolverAuthorizerMissingError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'ResolverAuthorizerMissing',\n      message: `Resolver permission missing: ${params.path}`,\n      params\n    });\n  }\n}\n\nexport class SessionUserNotFoundError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'SessionUserNotFound',\n      message: `Session user not found: ${params.id}`,\n      params\n    });\n  }\n}\n\nexport class NotAuthorizedError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'NotAuthorized',\n      message: `Not authorized to access ${params.path}`,\n      params\n    });\n  }\n}\n\nexport class AuthTokenError extends GraphQLError {\n  constructor (params) {\n    const {code, message} = params;\n    super({\n      code: 'AuthToken',\n      message: `Auth token error ${code}: ${message}`,\n      params\n    });\n  }\n}\n","import Admin from 'firebase-admin';\nimport DataLoader from 'dataloader';\nimport {omit, uniq, isNumber, isObject} from 'lodash';\n\nimport timestampsToDates from './timestampsToDates';\nimport {DocumentDoesNotExistError} from './Errors';\n\nexport default class Collection {\n  static get (args) {\n    return new this(args);\n  }\n\n  constructor ({getCollection, getLoader}) {\n    this.getCollection = getCollection;\n    this.getLoader = getLoader;\n  }\n\n  get name () {\n    throw new Error('Collection child class must implement .name');\n  }\n\n  get db () {\n    return Admin.firestore();\n  }\n\n  get collection () {\n    return this.db.collection(this.name);\n  }\n\n  doc (id) {\n    return this.collection.doc(id);\n  }\n\n  get loader () {\n    return new DataLoader((ids)=> {\n      return this.getMany({ids});\n    });\n  }\n\n  //////////\n  // CRUD //\n  //////////\n  async add ({data}) {\n    data = omit(data, 'id');\n    const timestamp = this._timestampField();\n    data.created_at = timestamp;\n    data.updated_at = timestamp;\n    const ref = await this.collection.add(data);\n    data.id = ref.id;\n    return data;\n  }\n\n  async set ({id, data, merge = true}) {\n    data = omit(data, 'id');\n    data.updated_at = this._timestampField();\n    const ref = this.doc(id);\n    await ref.set(data, {merge});\n    return this.get({id});\n  }\n\n  async addOrSetByField ({field, data, add = (x)=> x}) {\n    const value = data[field];\n    const doc = await this.findOneByField(field)(value);\n    if (doc) {\n      const {id} = doc;\n      return this.set({id, data});\n    } else {\n      data = await add(data);\n      return this.add({data});\n    }\n  }\n\n  async getOrAddById ({id, data, add = (x)=> x}) {\n    let user = await this.get({id});\n    if (!user) {\n      data = await add({id, data});\n      user = await this.set({id, data, merge: false});\n    }\n    return user;\n  }\n\n  async exists (id) {\n    const ref = this.doc(id);\n    const snap = await ref.get();\n    return snap.exists;\n  }\n\n  async get ({id, assert = false}) {\n    const ref = this.doc(id);\n    const snap = await ref.get();\n    if (assert && !snap.exists) {\n      const error = this._doesNotExistError(id);\n      throw error;\n    }\n    return this._snapToDoc(snap);\n  }\n\n  async getMany ({ids}) {\n    if (!ids || ids.length === 0) {\n      return [];\n    }\n\n    const uniques = uniq(ids);\n    const refs = uniques.map((id)=> this.doc(id));\n    const snaps = await this.db.getAll(refs);\n    const docs = snaps.map((snap)=> this._snapToDoc(snap));\n\n    const docs_by_id = {};\n    for (const doc of docs) {\n      if (doc) {\n        docs_by_id[doc.id] = doc;\n      }\n    }\n\n    return ids.map((id)=> {\n      return (id in docs_by_id) ? docs_by_id[id] : null;\n    });\n  }\n\n  async find ({where, limit, order_by, select} = {}) {\n    let query = this.collection;\n\n    function invalid (field) {\n      throw new Error(`Invalid ${field} for find`);\n    }\n\n    if (where) {\n      let parts;\n      if (isObject(where)) {\n        parts = Object.entries(where).map(([field, value])=> {\n          return [field, '==', value];\n        });\n      } else if (Array.isArray(where)) {\n        parts = Array.isArray(where[0]) ? where : [where];\n      } else {\n        invalid('where');\n      }\n\n      for (const part of parts) {\n        if (part.length !== 3) {\n          invalid('where');\n        }\n        const [field, op, value] = part;\n        query = query.where(field, op, value);\n      }\n    }\n\n    if (order_by) {\n      if (!Array.isArray(order_by)) {\n        order_by = [order_by];\n      }\n      query = query.orderBy(...order_by);\n    }\n\n\n    if (limit) {\n      if (!isNumber(limit)) {\n        invalid('limit');\n      }\n      query = query.limit(limit);\n    }\n\n    if (select) {\n      if (!Array.isArray(select)) {\n        invalid('select');\n      }\n      query = query.select(...select);\n    }\n\n    const snap = await query.get();\n    return snap.docs.map(this._snapToDoc);\n  }\n\n  async findOne ({where, order_by, select}) {\n    const docs = await this.find({\n      limit: 1,\n      where,\n      order_by,\n      select\n    });\n    return (docs.length > 0) ? docs[0] : null;\n  }\n\n  findOneByField (field) {\n    return (value)=> {\n      return this.findOne({\n        where: [field, '==', value]\n      });\n    };\n  }\n\n  async delete ({id, ids, where}) {\n    if (id) {\n      const ref = this.doc(id);\n      return ref.delete();\n    }\n\n    if (ids && where) {\n      throw new Error('Delete call should pass ids or where not both');\n    }\n\n    if (where) {\n      const docs = await this.find({where});\n      ids = docs.map(({id})=> id);\n    }\n\n    if (ids.length === 0) {\n      return Promise.resolve();\n    }\n\n    const batch = this.db.batch();\n    for (const id of ids) {\n      const ref = this.doc(id);\n      batch.delete(ref);\n    }\n    return batch.commit();\n  }\n\n  /////////////\n  // Helpers //\n  /////////////\n\n  _timestampField () {\n    return Admin.firestore.FieldValue.serverTimestamp();\n  }\n\n  _deleteField () {\n    return Admin.firestore.FieldValue.delete();\n  }\n\n  _snapToDoc (snap) {\n    if (snap.exists) {\n      const data = snap.data();\n      data.id = snap.id;\n      return timestampsToDates(data);\n    } else {\n      return null;\n    }\n  }\n\n  _doesNotExistError (id) {\n    const type = this.name();\n    return new DocumentDoesNotExistError({type, id});\n  }\n\n  _id () {\n    const ref = this.collection.doc();\n    return ref.id;\n  }\n}\n","import {isFunction} from 'lodash';\nimport Logger from './Logger';\nimport {\n  GraphQLError,\n  ResolverMissingError,\n  ResolverAuthorizerMissingError,\n  NotAuthorizedError\n} from './Errors';\n\nconst APOLLO_UNION_RESOLVER_NAME = '__resolveType';\n\nexport default class Controller {\n  constructor ({logger} = {}) {\n    if (!logger) {\n      logger = new Logger();\n    }\n    this.logger = logger;\n  }\n\n  get name () {\n    throw new Error('Child class must implement .name');\n  }\n\n  resolvers () {\n    // Child class should implement this method and return\n    // an object with this shape:\n    //\n    // {\n    //   // Mutations resolved in this controller\n    //   Mutation: {\n    //     <MutationName>: {\n    //       resolver: Function,\n    //       authorizer: Function\n    //     }\n    //   },\n    //   // Queries resolved in this controller\n    //   Query: {\n    //     <QueryName>: {\n    //       resolver: Function,\n    //       authorizer: Function\n    //     }\n    //   },\n    //   // Type fields resolved in this controller\n    //   <TypeName>: {\n    //     <FieldName>: {\n    //       resolver: Function,\n    //       authorizer: Function\n    //     }\n    //   },\n    //   <UnionTypeName>: {\n    //     __resolveType: Function\n    //   }\n    // }\n    throw new Error('Child class must implement .resolvers');\n  }\n\n  collection ({context, name}) {\n    return context.getCollection(name || this.name);\n  }\n\n  loader ({context, name}) {\n    return context.getLoader(name || this.name);\n  }\n\n  expose () {\n    const result = {};\n    const {logger} = this;\n\n    const groups = this.resolvers();\n    for (const [type, group] of Object.entries(groups)) {\n      if (!(type in result)) {\n        result[type] = {};\n      }\n\n      for (const [name, definition] of Object.entries(group)) {\n        const path = `${type}.${name}`;\n\n        // Resolve Union types\n        // https://www.apollographql.com/docs/graphql-tools/resolvers/#unions-and-interfaces\n        if (name === APOLLO_UNION_RESOLVER_NAME) {\n          result[type][name] = (obj, context, info)=> {\n            return definition.call(this, {obj, context, info});\n          };\n          continue;\n        }\n\n        const {resolver, authorizer} = definition;\n\n        const valid = [resolver, authorizer].every(isFunction);\n        if (!valid) {\n          throw new Error(`Invalid resolver definition for ${path}`);\n        }\n\n        result[type][name] = async (obj, args, context, info)=> {\n          logger.debug(`Calling resolver ${path}`);\n\n          try {\n            if (!resolver) {\n              throw new ResolverMissingError({path});\n            }\n\n            if (!authorizer) {\n              throw new ResolverAuthorizerMissingError({path});\n            }\n\n            const params = {obj, args, context, info};\n\n            const {auth_error} = context;\n            if (auth_error) {\n              throw auth_error;\n            }\n\n            const authorized = await authorizer.call(this, params);\n            if (!authorized) {\n              throw new NotAuthorizedError({path});\n            }\n\n            return resolver.call(this, params);\n          } catch (error) {\n            if (error.expected) {\n              logger.error(error, 'Expected GraphQL error');\n              throw error;\n            } else {\n              logger.error(error, 'Unexpected GraphQL error');\n              throw new GraphQLError();\n            }\n          }\n        };\n      }\n    }\n    return result;\n  }\n\n\n  ///////////////////////\n  // Generic Resolvers //\n  ///////////////////////\n\n  get (request) {\n    const collection = this.collection(request);\n    return collection.get(request.args);\n  }\n\n  list (request) {\n    const collection = this.collection(request);\n    return collection.list(request.args);\n  }\n\n  create (request) {\n    const collection = this.collection(request);\n    const {data} = request.args;\n    return collection.add(data);\n  }\n\n  update (request) {\n    const collection = this.collection(request);\n    const {id, data} = request.args;\n    return collection.set({id, data});\n  }\n\n  delete (request) {\n    const collection = this.collection(request);\n    const {id} = request.args;\n    return collection.delete({id});\n  }\n\n  load ({collection, field}) {\n    return ({obj, context})=> {\n      const loader = context.getLoader(collection);\n      const id = obj[field];\n      return id ? loader.load(id) : null;\n    };\n  }\n\n  loadMany ({collection, field}) {\n    return ({obj, context})=> {\n      const loader = context.getLoader(collection);\n      const ids = obj[field];\n      return ids.length ? loader.loadMany(ids) : [];\n    };\n  }\n\n  resolveType (getType) {\n    return ({obj, info})=> {\n      const type = getType(obj);\n      return info.schema.getType(type);\n    };\n  }\n\n  stub () {\n    throw new Error('Unimplemented stub');\n  }\n}\n","export default function getToken (request) {\n  const header = request.get('Authorization');\n  const prefix = /^Bearer /;\n  if (header && header.match(prefix)) {\n    return header.replace(prefix, '');\n  } else {\n    return null;\n  }\n}\n","export function isSignedIn ({context}) {\n  return !!context.user_id;\n}\n\nexport function isPublic () {\n  return true;\n}\n","import * as Functions from 'firebase-functions';\nimport {ApolloServer} from 'apollo-server-cloud-functions';\n\nimport makeSchema from './makeSchema';\nimport contextBuilder from './contextBuilder';\nimport getTokenDefault from './getToken';\n\nexport default function graphqlHandler ({\n  Schema,\n  Scalars,\n  Controllers,\n  Collections,\n  context,\n  getToken = getTokenDefault,\n  user_collection = 'User',\n  options = {}\n}) {\n  if (!context) {\n    context = contextBuilder({Collections, getToken, user_collection});\n  }\n  const schema = makeSchema({Schema, Controllers, Scalars});\n  const server = new ApolloServer({schema, context});\n  const handler = server.createHandler(options);\n  return Functions.https.onRequest(handler);\n}\n","import getUserIdFromToken from './getUserIdFromToken';\n\nexport default function contextBuilder ({Collections, getToken, user_collection}) {\n  return async ({req})=> {\n    const loaders = {};\n    function getLoader (arg) {\n      const name = arg.name || arg;\n      if (!(name in loaders)) {\n        const collection = getCollection(name);\n        loaders[name] = collection.loader;\n      }\n      return loaders[name];\n    }\n\n    function getCollection (arg) {\n      const name = arg.name || arg;\n      const Collection = Collections[name];\n      if (!Collection) {\n        throw new Error(`Collection with name ${name} does not exist`);\n      }\n\n      return Collection.get({\n        getCollection,\n        getLoader\n      });\n    }\n\n    let user_id = null;\n    let user = null;\n    let auth_error = null;\n\n    const token = getToken(req);\n    if (token) {\n      try {\n        const User = getCollection(user_collection);\n        user_id = await getUserIdFromToken(token);\n        user = await User.get({id: user_id});\n      } catch (error) {\n        auth_error = error;\n      }\n    }\n\n    return {\n      getCollection,\n      getLoader,\n      auth_error,\n      token,\n      user_id,\n      user\n    };\n  };\n}\n","import Admin from 'firebase-admin';\n\nimport {AuthTokenError} from './Errors';\n\nexport default async function getUserIdFromToken (token) {\n  try {\n    const auth = Admin.auth();\n    const decoded = await auth.verifyIdToken(token);\n    return decoded.uid;\n  } catch (error) {\n    const {code, message} = error;\n    throw new AuthTokenError({code, message});\n  }\n}\n","import {makeExecutableSchema} from 'graphql-tools';\nimport {merge} from 'lodash';\n\nexport default function makeSchema ({Schema, Controllers, Scalars}) {\n  const resolvers = {};\n  for (const [name, Controller] of Object.entries(Controllers)) {\n    console.log(`Exposing controller ${name}`);\n    const controller = new Controller();\n    merge(resolvers, controller.expose());\n  }\n  merge(resolvers, Scalars);\n\n  return makeExecutableSchema({\n    typeDefs: Schema,\n    resolvers\n  });\n}\n","import Admin from 'firebase-admin';\n\nexport default function initializeFirebase ({getServiceAccount}) {\n  const env = process.env.NODE_ENV;\n  const service_account = getServiceAccount(env);\n  const credential = Admin.credential.cert(service_account);\n  const {project_id} = service_account;\n  const database_url = `https://${project_id}.firebaseio.com`;\n\n  Admin.initializeApp({\n    credential,\n    databaseURL: database_url\n  });\n}\n"],"names":["timestampsToDates","obj","constructor","name","map","Object","keys","reduce","result","k","toDate","GraphQLError","code","message","params","Function","_this","expected","is","ApolloError","DocumentDoesNotExistError","type","id","ResolverMissingError","path","ResolverAuthorizerMissingError","SessionUserNotFoundError","NotAuthorizedError","AuthTokenError","Collection","getLoader","this","getCollection","get","args","doc","collection","add","data","omit","timestamp","_timestampField","created_at","updated_at","ref","set","merge","_this4","addOrSetByField","field","x","value","_this6","findOneByField","getOrAddById","_this8","user","exists","snap","assert","_this12","_doesNotExistError","_snapToDoc","getMany","ids","length","refs","uniq","_this14","db","getAll","snaps","docs","docs_by_id","find","where","limit","order_by","select","invalid","Error","query","_this16","parts","isObject","entries","Array","isArray","part","orderBy","isNumber","findOne","_this19","Promise","resolve","batch","_this21","commit","Admin","firestore","FieldValue","serverTimestamp","_deleteField","_id","DataLoader","_this22","Logger","child","level","prototype","global","console","log","call","_catch","body","recover","e","then","Controller","logger","resolvers","context","loader","expose","groups","group","definition","info","resolver","authorizer","every","isFunction","debug","auth_error","authorized","error","request","list","create","update","load","loadMany","resolveType","getType","schema","stub","getToken","header","prefix","match","replace","user_id","Schema","Scalars","Controllers","user_collection","options","Collections","req","token","arg","loaders","User","auth","verifyIdToken","uid","getUserIdFromToken","contextBuilder","getTokenDefault","controller","makeExecutableSchema","typeDefs","makeSchema","handler","ApolloServer","createHandler","Functions","onRequest","service_account","getServiceAccount","process","env","NODE_ENV","credential","cert","initializeApp","databaseURL","project_id"],"mappings":"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"}