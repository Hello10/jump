{"version":3,"file":"index.modern.js","sources":["../src/Authorizers.js","../src/timestampsToDates.js","../src/Errors.js","../src/Collection.js","../src/Logger.js","../src/Controller.js","../src/getToken.js","../src/graphqlHandler.js","../src/contextBuilder.js","../src/getUserIdFromToken.js","../src/makeSchema.js","../src/initializeFirebase.js"],"sourcesContent":["export function isSignedIn ({context}) {\n  return !!context.user_id;\n}\n\nexport function isPublic () {\n  return true;\n}\n","export default function timestampsToDates (obj) {\n  if (!obj) {\n    return obj;\n  }\n  const type = obj.constructor.name;\n  switch (type) {\n    case 'Array':\n      return obj.map(timestampsToDates);\n    case 'Object':\n      return Object.keys(obj).reduce((result, k)=> {\n        result[k] = timestampsToDates(obj[k]);\n        return result;\n      }, {});\n    case 'Timestamp':\n      return obj.toDate();\n    default:\n      return obj;\n  }\n}\n","import {ApolloError} from 'apollo-server-cloud-functions';\n\n// TODO: remove once update eslint dep\n/*eslint max-classes-per-file: [\"error\", 100] */\n\nexport class GraphQLError extends ApolloError {\n  constructor ({\n    code = 'GraphQLError',\n    message = 'GraphQL error',\n    params\n  }) {\n    if (message.constructor === Function) {\n      message = message(params);\n    }\n    super(message, code, params);\n    this.expected = true;\n  }\n\n  is (code) {\n    return (this.code === code);\n  }\n}\n\nexport class DocumentDoesNotExistError extends GraphQLError {\n  constructor (params) {\n    const {type, id} = params;\n    super({\n      code: 'DocumentDoesNotExist',\n      message: `Document ${type} with id ${id} does not exist`,\n      params\n    });\n  }\n}\n\nexport class ResolverMissingError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'ResolverMissing',\n      message: `Resolver missing: ${params.path}`,\n      params\n    });\n  }\n}\n\nexport class ResolverAuthorizerMissingError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'ResolverAuthorizerMissing',\n      message: `Resolver permission missing: ${params.path}`,\n      params\n    });\n  }\n}\n\nexport class SessionUserNotFoundError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'SessionUserNotFound',\n      message: `Session user not found: ${params.id}`,\n      params\n    });\n  }\n}\n\nexport class NotAuthorizedError extends GraphQLError {\n  constructor (params) {\n    super({\n      code: 'NotAuthorized',\n      message: `Not authorized to access ${params.path}`,\n      params\n    });\n  }\n}\n\nexport class AuthTokenError extends GraphQLError {\n  constructor (params) {\n    const {code, message} = params;\n    super({\n      code: 'AuthToken',\n      message: `Auth token error ${code}: ${message}`,\n      params\n    });\n  }\n}\n","import Admin from 'firebase-admin';\nimport DataLoader from 'dataloader';\nimport {omit, uniq, isNumber, isObject} from 'lodash';\n\nimport timestampsToDates from './timestampsToDates';\nimport {DocumentDoesNotExistError} from './Errors';\n\nexport default class Collection {\n  static get (args) {\n    return new this(args);\n  }\n\n  constructor ({getCollection, getLoader}) {\n    this.getCollection = getCollection;\n    this.getLoader = getLoader;\n  }\n\n  get name () {\n    throw new Error('Collection child class must implement .name');\n  }\n\n  get db () {\n    return Admin.firestore();\n  }\n\n  get collection () {\n    return this.db.collection(this.name);\n  }\n\n  doc (id) {\n    return this.collection.doc(id);\n  }\n\n  get loader () {\n    return new DataLoader((ids)=> {\n      return this.getMany({ids});\n    });\n  }\n\n  //////////\n  // CRUD //\n  //////////\n  async add ({data}) {\n    data = omit(data, 'id');\n    const timestamp = this._timestampField();\n    data.created_at = timestamp;\n    data.updated_at = timestamp;\n    const ref = await this.collection.add(data);\n    data.id = ref.id;\n    return data;\n  }\n\n  async set ({id, data, merge = true}) {\n    data = omit(data, 'id');\n    data.updated_at = this._timestampField();\n    const ref = this.doc(id);\n    await ref.set(data, {merge});\n    return this.get({id});\n  }\n\n  async addOrSetByField ({field, data, add = (x)=> x}) {\n    const value = data[field];\n    const doc = await this.findOneByField(field)(value);\n    if (doc) {\n      const {id} = doc;\n      return this.set({id, data});\n    } else {\n      data = await add(data);\n      return this.add({data});\n    }\n  }\n\n  async getOrAddById ({id, data, add = (x)=> x}) {\n    let user = await this.get({id});\n    if (!user) {\n      data = await add({id, data});\n      user = await this.set({id, data, merge: false});\n    }\n    return user;\n  }\n\n  async exists (id) {\n    const ref = this.doc(id);\n    const snap = await ref.get();\n    return snap.exists;\n  }\n\n  async get ({id, assert = false}) {\n    const ref = this.doc(id);\n    const snap = await ref.get();\n    if (assert && !snap.exists) {\n      const error = this._doesNotExistError(id);\n      throw error;\n    }\n    return this._snapToDoc(snap);\n  }\n\n  async getMany ({ids}) {\n    if (!ids || ids.length === 0) {\n      return [];\n    }\n\n    const uniques = uniq(ids);\n    const refs = uniques.map((id)=> this.doc(id));\n    const snaps = await this.db.getAll(refs);\n    const docs = snaps.map((snap)=> this._snapToDoc(snap));\n\n    const docs_by_id = {};\n    for (const doc of docs) {\n      if (doc) {\n        docs_by_id[doc.id] = doc;\n      }\n    }\n\n    return ids.map((id)=> {\n      return (id in docs_by_id) ? docs_by_id[id] : null;\n    });\n  }\n\n  async find ({where, limit, order_by, select} = {}) {\n    let query = this.collection;\n\n    function invalid (field) {\n      throw new Error(`Invalid ${field} for find`);\n    }\n\n    if (where) {\n      let parts;\n      if (isObject(where)) {\n        parts = Object.entries(where).map(([field, value])=> {\n          return [field, '==', value];\n        });\n      } else if (Array.isArray(where)) {\n        parts = Array.isArray(where[0]) ? where : [where];\n      } else {\n        invalid('where');\n      }\n\n      for (const part of parts) {\n        if (part.length !== 3) {\n          invalid('where');\n        }\n        const [field, op, value] = part;\n        query = query.where(field, op, value);\n      }\n    }\n\n    if (order_by) {\n      if (!Array.isArray(order_by)) {\n        order_by = [order_by];\n      }\n      query = query.orderBy(...order_by);\n    }\n\n\n    if (limit) {\n      if (!isNumber(limit)) {\n        invalid('limit');\n      }\n      query = query.limit(limit);\n    }\n\n    if (select) {\n      if (!Array.isArray(select)) {\n        invalid('select');\n      }\n      query = query.select(...select);\n    }\n\n    const snap = await query.get();\n    return snap.docs.map(this._snapToDoc);\n  }\n\n  async findOne ({where, order_by, select}) {\n    const docs = await this.find({\n      limit: 1,\n      where,\n      order_by,\n      select\n    });\n    return (docs.length > 0) ? docs[0] : null;\n  }\n\n  findOneByField (field) {\n    return (value)=> {\n      return this.findOne({\n        where: [field, '==', value]\n      });\n    };\n  }\n\n  async delete ({id, ids, where}) {\n    if (id) {\n      const ref = this.doc(id);\n      return ref.delete();\n    }\n\n    if (ids && where) {\n      throw new Error('Delete call should pass ids or where not both');\n    }\n\n    if (where) {\n      const docs = await this.find({where});\n      ids = docs.map(({id})=> id);\n    }\n\n    if (ids.length === 0) {\n      return Promise.resolve();\n    }\n\n    const batch = this.db.batch();\n    for (const id of ids) {\n      const ref = this.doc(id);\n      batch.delete(ref);\n    }\n    return batch.commit();\n  }\n\n  /////////////\n  // Helpers //\n  /////////////\n\n  _timestampField () {\n    return Admin.firestore.FieldValue.serverTimestamp();\n  }\n\n  _deleteField () {\n    return Admin.firestore.FieldValue.delete();\n  }\n\n  _snapToDoc (snap) {\n    if (snap.exists) {\n      const data = snap.data();\n      data.id = snap.id;\n      return timestampsToDates(data);\n    } else {\n      return null;\n    }\n  }\n\n  _doesNotExistError (id) {\n    const type = this.name();\n    return new DocumentDoesNotExistError({type, id});\n  }\n\n  _id () {\n    const ref = this.collection.doc();\n    return ref.id;\n  }\n}\n","export default class Logger {\n  child () {\n    return this;\n  }\n}\n\nconst levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\nfor (const level of levels) {\n  Logger.prototype[level] = function log (...args) {\n    const {console} = global;\n    const log = (level in console) ? console[level] : console.log;\n    return log.call(console, ...args);\n  };\n}\n","import {isFunction} from 'lodash';\nimport Logger from './Logger';\nimport {\n  GraphQLError,\n  ResolverMissingError,\n  ResolverAuthorizerMissingError,\n  NotAuthorizedError\n} from './Errors';\n\nconst APOLLO_UNION_RESOLVER_NAME = '__resolveType';\n\nexport default class Controller {\n  constructor ({logger} = {}) {\n    if (!logger) {\n      logger = new Logger();\n    }\n    this.logger = logger;\n  }\n\n  get name () {\n    throw new Error('Child class must implement .name');\n  }\n\n  resolvers () {\n    // Child class should implement this method and return\n    // an object with this shape:\n    //\n    // {\n    //   // Mutations resolved in this controller\n    //   Mutation: {\n    //     <MutationName>: {\n    //       resolver: Function,\n    //       authorizer: Function\n    //     }\n    //   },\n    //   // Queries resolved in this controller\n    //   Query: {\n    //     <QueryName>: {\n    //       resolver: Function,\n    //       authorizer: Function\n    //     }\n    //   },\n    //   // Type fields resolved in this controller\n    //   <TypeName>: {\n    //     <FieldName>: {\n    //       resolver: Function,\n    //       authorizer: Function\n    //     }\n    //   },\n    //   <UnionTypeName>: {\n    //     __resolveType: Function\n    //   }\n    // }\n    throw new Error('Child class must implement .resolvers');\n  }\n\n  collection ({context, name}) {\n    return context.getCollection(name || this.name);\n  }\n\n  loader ({context, name}) {\n    return context.getLoader(name || this.name);\n  }\n\n  expose () {\n    const result = {};\n    const {logger} = this;\n\n    const groups = this.resolvers();\n    for (const [type, group] of Object.entries(groups)) {\n      if (!(type in result)) {\n        result[type] = {};\n      }\n\n      for (const [name, definition] of Object.entries(group)) {\n        const path = `${type}.${name}`;\n\n        // Resolve Union types\n        // https://www.apollographql.com/docs/graphql-tools/resolvers/#unions-and-interfaces\n        if (name === APOLLO_UNION_RESOLVER_NAME) {\n          result[type][name] = (obj, context, info)=> {\n            return definition.call(this, {obj, context, info});\n          };\n          continue;\n        }\n\n        const {resolver, authorizer} = definition;\n\n        const valid = [resolver, authorizer].every(isFunction);\n        if (!valid) {\n          throw new Error(`Invalid resolver definition for ${path}`);\n        }\n\n        result[type][name] = async (obj, args, context, info)=> {\n          logger.debug(`Calling resolver ${path}`);\n\n          try {\n            if (!resolver) {\n              throw new ResolverMissingError({path});\n            }\n\n            if (!authorizer) {\n              throw new ResolverAuthorizerMissingError({path});\n            }\n\n            const params = {obj, args, context, info};\n\n            const {auth_error} = context;\n            if (auth_error) {\n              throw auth_error;\n            }\n\n            const authorized = await authorizer.call(this, params);\n            if (!authorized) {\n              throw new NotAuthorizedError({path});\n            }\n\n            return resolver.call(this, params);\n          } catch (error) {\n            if (error.expected) {\n              logger.error(error, 'Expected GraphQL error');\n              throw error;\n            } else {\n              logger.error(error, 'Unexpected GraphQL error');\n              throw new GraphQLError();\n            }\n          }\n        };\n      }\n    }\n    return result;\n  }\n\n\n  ///////////////////////\n  // Generic Resolvers //\n  ///////////////////////\n\n  get (request) {\n    const collection = this.collection(request);\n    return collection.get(request.args);\n  }\n\n  list (request) {\n    const collection = this.collection(request);\n    return collection.list(request.args);\n  }\n\n  create (request) {\n    const collection = this.collection(request);\n    const {data} = request.args;\n    return collection.add(data);\n  }\n\n  update (request) {\n    const collection = this.collection(request);\n    const {id, data} = request.args;\n    return collection.set({id, data});\n  }\n\n  delete (request) {\n    const collection = this.collection(request);\n    const {id} = request.args;\n    return collection.delete({id});\n  }\n\n  load ({collection, field}) {\n    return ({obj, context})=> {\n      const loader = context.getLoader(collection);\n      const id = obj[field];\n      return id ? loader.load(id) : null;\n    };\n  }\n\n  loadMany ({collection, field}) {\n    return ({obj, context})=> {\n      const loader = context.getLoader(collection);\n      const ids = obj[field];\n      return ids.length ? loader.loadMany(ids) : [];\n    };\n  }\n\n  resolveType (getType) {\n    return ({obj, info})=> {\n      const type = getType(obj);\n      return info.schema.getType(type);\n    };\n  }\n\n  stub () {\n    throw new Error('Unimplemented stub');\n  }\n}\n","export default function getToken (request) {\n  const header = request.get('Authorization');\n  const prefix = /^Bearer /;\n  if (header && header.match(prefix)) {\n    return header.replace(prefix, '');\n  } else {\n    return null;\n  }\n}\n","import * as Functions from 'firebase-functions';\nimport {ApolloServer} from 'apollo-server-cloud-functions';\n\nimport makeSchema from './makeSchema';\nimport contextBuilder from './contextBuilder';\nimport getTokenDefault from './getToken';\n\nexport default function graphqlHandler ({\n  Schema,\n  Scalars,\n  Controllers,\n  Collections,\n  context,\n  getToken = getTokenDefault,\n  user_collection = 'User',\n  options = {}\n}) {\n  if (!context) {\n    context = contextBuilder({Collections, getToken, user_collection});\n  }\n  const schema = makeSchema({Schema, Controllers, Scalars});\n  const server = new ApolloServer({schema, context});\n  const handler = server.createHandler(options);\n  return Functions.https.onRequest(handler);\n}\n","import getUserIdFromToken from './getUserIdFromToken';\n\nexport default function contextBuilder ({Collections, getToken, user_collection}) {\n  return async ({req})=> {\n    const loaders = {};\n    function getLoader (arg) {\n      const name = arg.name || arg;\n      if (!(name in loaders)) {\n        const collection = getCollection(name);\n        loaders[name] = collection.loader;\n      }\n      return loaders[name];\n    }\n\n    function getCollection (arg) {\n      const name = arg.name || arg;\n      const Collection = Collections[name];\n      if (!Collection) {\n        throw new Error(`Collection with name ${name} does not exist`);\n      }\n\n      return Collection.get({\n        getCollection,\n        getLoader\n      });\n    }\n\n    let user_id = null;\n    let user = null;\n    let auth_error = null;\n\n    const token = getToken(req);\n    if (token) {\n      try {\n        const User = getCollection(user_collection);\n        user_id = await getUserIdFromToken(token);\n        user = await User.get({id: user_id});\n      } catch (error) {\n        auth_error = error;\n      }\n    }\n\n    return {\n      getCollection,\n      getLoader,\n      auth_error,\n      token,\n      user_id,\n      user\n    };\n  };\n}\n","import Admin from 'firebase-admin';\n\nimport {AuthTokenError} from './Errors';\n\nexport default async function getUserIdFromToken (token) {\n  try {\n    const auth = Admin.auth();\n    const decoded = await auth.verifyIdToken(token);\n    return decoded.uid;\n  } catch (error) {\n    const {code, message} = error;\n    throw new AuthTokenError({code, message});\n  }\n}\n","import {makeExecutableSchema} from 'graphql-tools';\nimport {merge} from 'lodash';\n\nexport default function makeSchema ({Schema, Controllers, Scalars}) {\n  const resolvers = {};\n  for (const [name, Controller] of Object.entries(Controllers)) {\n    console.log(`Exposing controller ${name}`);\n    const controller = new Controller();\n    merge(resolvers, controller.expose());\n  }\n  merge(resolvers, Scalars);\n\n  return makeExecutableSchema({\n    typeDefs: Schema,\n    resolvers\n  });\n}\n","import Admin from 'firebase-admin';\n\nexport default function initializeFirebase ({getServiceAccount}) {\n  const env = process.env.NODE_ENV;\n  const service_account = getServiceAccount(env);\n  const credential = Admin.credential.cert(service_account);\n  const {project_id} = service_account;\n  const database_url = `https://${project_id}.firebaseio.com`;\n\n  Admin.initializeApp({\n    credential,\n    databaseURL: database_url\n  });\n}\n"],"names":["context","user_id","timestampsToDates","obj","constructor","name","map","Object","keys","reduce","result","k","toDate","GraphQLError","ApolloError","code","message","params","Function","super","this","expected","is","DocumentDoesNotExistError","type","id","ResolverMissingError","path","ResolverAuthorizerMissingError","NotAuthorizedError","AuthTokenError","Collection","[object Object]","args","getCollection","getLoader","Error","db","Admin","firestore","collection","doc","loader","DataLoader","ids","getMany","data","omit","timestamp","_timestampField","created_at","updated_at","ref","add","merge","set","get","field","x","value","findOneByField","user","exists","assert","snap","_doesNotExistError","_snapToDoc","length","refs","uniq","docs","getAll","docs_by_id","where","limit","order_by","select","query","invalid","parts","isObject","entries","Array","isArray","part","op","orderBy","isNumber","find","findOne","delete","Promise","resolve","batch","commit","FieldValue","serverTimestamp","_deleteField","_id","Logger","child","levels","level","prototype","console","global","log","call","Controller","logger","resolvers","expose","groups","group","definition","info","resolver","authorizer","every","isFunction","async","debug","auth_error","_this","error","request","list","create","update","load","loadMany","resolveType","getType","schema","stub","getToken","header","prefix","match","replace","graphqlHandler","Schema","Scalars","Controllers","Collections","getTokenDefault","user_collection","options","req","loaders","arg","token","User","auth","verifyIdToken","uid","getUserIdFromToken","contextBuilder","controller","makeExecutableSchema","typeDefs","makeSchema","handler","ApolloServer","createHandler","Functions","onRequest","initializeFirebase","getServiceAccount","service_account","process","env","NODE_ENV","credential","cert","project_id","initializeApp","databaseURL"],"mappings":"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"}